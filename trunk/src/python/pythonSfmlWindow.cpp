#include "PythonEmbedder.hpp"
#include <SFML/Window.hpp>

using namespace boost::python;

enum JoystickConstants
{
    Count = sf::Joystick::Count,
    ButtonCount = sf::Joystick::ButtonCount,
    AxisCount = sf::Joystick::AxisCount
};

/// In sf.Key class, for test purpose
unsigned int key_as_int(const sf::Keyboard::Key &key) { return key; }

void PythonEmbedder::exportSfWindow() // pythonSfml.cpp file was too big (due to many libraries included files)
{
    namespace bp = boost::python;

    class_<sf::ContextSettings>("ContextSettings",
        "Structure defining the settings of the OpenGL context attached to a window")
        .def_readwrite("depthBits", &sf::ContextSettings::depthBits)
        .def_readwrite("stencilBits", &sf::ContextSettings::stencilBits)
        .def_readwrite("antialiasingLevel", &sf::ContextSettings::antialiasingLevel)
        .def_readwrite("majorVersion", &sf::ContextSettings::majorVersion)
        .def_readwrite("minorVersion", &sf::ContextSettings::minorVersion)
    ; class_<sf::VideoMode>("VideoMode",
        "VideoMode defines a video mode (width, height, bpp)")
        .def(bp::init<unsigned int, unsigned int, optional<unsigned int> >())
        .def("isValid", &sf::VideoMode::isValid)
        .def("getDesktopMode", &sf::VideoMode::getDesktopMode)
        .def_readwrite("width", &sf::VideoMode::width)
        .def_readwrite("height", &sf::VideoMode::height)
        .def_readwrite("bitsPerPixel", &sf::VideoMode::bitsPerPixel)
        .staticmethod("getDesktopMode")
        .def("getFullscreenModes", &sf::VideoMode::getFullscreenModes,
            return_value_policy<reference_existing_object>())
        .staticmethod("getFullscreenModes")
    ; class_<std::vector<sf::VideoMode> >("VideoModeVec")
        .def(vector_indexing_suite<std::vector<sf::VideoMode> >())
    ; class_<sf::Window, boost::noncopyable>("Window",
        "Window that serves as a target for OpenGL rendering")
        .def(bp::init<sf::VideoMode, const std::string&, optional<
             unsigned long, const sf::ContextSettings&> >())
        .def("close", &sf::Window::close)
        .def("isOpen", &sf::Window::isOpen)
        .def("getSize", &sf::Window::getSize)
        .def("getSettings", &sf::Window::getSettings,
             return_value_policy<reference_existing_object>())
        .def("pollEvent", &sf::Window::pollEvent)
        .def("waitEvent", &sf::Window::waitEvent)
        .def("setVerticalSyncEnabled", &sf::Window::setVerticalSyncEnabled)
        .def("setMouseCursorVisible", &sf::Window::setMouseCursorVisible)
        .def("setPosition", &sf::Window::setPosition)
        .def("setSize", &sf::Window::setSize)
        .def("setTitle", &sf::Window::setTitle)
        .def("setVisible", &sf::Window::setVisible)
        .def("setKeyRepeatEnabled", &sf::Window::setKeyRepeatEnabled)
        //.def("setIcon", &sf::Window::setIcon) // TO TEST
        .def("setActive", &sf::Window::setActive)
        .def("display", &sf::Window::display)
        .def("setFramerateLimit", &sf::Window::setFramerateLimit)
        .def("setJoystickThreshold", &sf::Window::setJoystickThreshold)
    ; { scope nested = class_<sf::Mouse>("Mouse",
        "Give access to the real-time state of the mouse")
        .def("isButtonPressed", &sf::Mouse::isButtonPressed)
        .def("getPosition", static_cast<sf::Vector2i(*)()>(
            &sf::Mouse::getPosition))
        .def("getPosition", static_cast<sf::Vector2i(*)(const sf::Window&)>(&
            sf::Mouse::getPosition))
        .def("setPosition", static_cast<void(*)(const sf::Vector2i&)>(
            &sf::Mouse::setPosition))
        .def("setPosition", static_cast<void(*)(const sf::Vector2i&,
            const sf::Window&)>(&sf::Mouse::setPosition))
        .staticmethod("isButtonPressed")
        .staticmethod("getPosition")
        .staticmethod("setPosition")
    ; enum_<sf::Mouse::Button>("Button", "Mouse buttons")
        .value("Left", sf::Mouse::Left)
        .value("Right", sf::Mouse::Right)
        .value("Middle", sf::Mouse::Middle)
        .value("XButton1", sf::Mouse::XButton1)
        .value("XButton2", sf::Mouse::XButton2)
        .value("ButtonCount", sf::Mouse::ButtonCount)
        .export_values() // export as nested to sf::Mouse scope
    ; } // end of sf::Mouse scope
    { scope nested = class_<sf::Keyboard>("Keyboard",
        "Give access to the real-time state of the keyboard")
        .def("isKeyPressed", &sf::Keyboard::isKeyPressed)
        .staticmethod("isKeyPressed")
    ; enum_<sf::Keyboard::Key>("Key", "Key codes")
        .value("A", sf::Keyboard::A)
        .value("B", sf::Keyboard::B)
        .value("C", sf::Keyboard::C)
        .value("D", sf::Keyboard::D)
        .value("E", sf::Keyboard::E)
        .value("F", sf::Keyboard::F)
        .value("G", sf::Keyboard::G)
        .value("H", sf::Keyboard::H)
        .value("I", sf::Keyboard::I)
        .value("J", sf::Keyboard::J)
        .value("K", sf::Keyboard::K)
        .value("L", sf::Keyboard::L)
        .value("M", sf::Keyboard::M)
        .value("N", sf::Keyboard::N)
        .value("O", sf::Keyboard::O)
        .value("P", sf::Keyboard::P)
        .value("Q", sf::Keyboard::Q)
        .value("R", sf::Keyboard::R)
        .value("S", sf::Keyboard::S)
        .value("T", sf::Keyboard::T)
        .value("U", sf::Keyboard::U)
        .value("V", sf::Keyboard::V)
        .value("W", sf::Keyboard::W)
        .value("X", sf::Keyboard::X)
        .value("Y", sf::Keyboard::Y)
        .value("Z", sf::Keyboard::Z)
        .value("Num0", sf::Keyboard::Num0)
        .value("Num1", sf::Keyboard::Num1)
        .value("Num2", sf::Keyboard::Num2)
        .value("Num3", sf::Keyboard::Num3)
        .value("Num4", sf::Keyboard::Num4)
        .value("Num5", sf::Keyboard::Num5)
        .value("Num6", sf::Keyboard::Num6)
        .value("Num7", sf::Keyboard::Num7)
        .value("Num8", sf::Keyboard::Num8)
        .value("Num9", sf::Keyboard::Num9)
        .value("Escape", sf::Keyboard::Escape)
        .value("LControl", sf::Keyboard::LControl)
        .value("LShift", sf::Keyboard::LShift)
        .value("LAlt", sf::Keyboard::LAlt)
        .value("LSystem", sf::Keyboard::LSystem)
        .value("RControl", sf::Keyboard::RControl)
        .value("RShift", sf::Keyboard::RShift)
        .value("RAlt", sf::Keyboard::RAlt)
        .value("RSystem", sf::Keyboard::RSystem)
        .value("Menu", sf::Keyboard::Menu)
        .value("LBracket", sf::Keyboard::LBracket)
        .value("RBracket", sf::Keyboard::RBracket)
        .value("SemiColon", sf::Keyboard::SemiColon)
        .value("Comma", sf::Keyboard::Comma)
        .value("Period", sf::Keyboard::Period)
        .value("Quote", sf::Keyboard::Quote)
        .value("Slash", sf::Keyboard::Slash)
        .value("BackSlash", sf::Keyboard::BackSlash)
        .value("Tilde", sf::Keyboard::Tilde)
        .value("Equal", sf::Keyboard::Equal)
        .value("Dash", sf::Keyboard::Dash)
        .value("Space", sf::Keyboard::Space)
        .value("Return", sf::Keyboard::Return)
        .value("Back", sf::Keyboard::Back)
        .value("Tab", sf::Keyboard::Tab)
        .value("PageUp", sf::Keyboard::PageUp)
        .value("PageDown", sf::Keyboard::PageDown)
        .value("End", sf::Keyboard::End)
        .value("Home", sf::Keyboard::Home)
        .value("Insert", sf::Keyboard::Insert)
        .value("Delete", sf::Keyboard::Delete)
        .value("Add", sf::Keyboard::Add)
        .value("Subtract", sf::Keyboard::Subtract)
        .value("Multiply", sf::Keyboard::Multiply)
        .value("Divide", sf::Keyboard::Divide)
        .value("Left", sf::Keyboard::Left)
        .value("Right", sf::Keyboard::Right)
        .value("Up", sf::Keyboard::Up)
        .value("Down", sf::Keyboard::Down)
        .value("Numpad0", sf::Keyboard::Numpad0)
        .value("Numpad1", sf::Keyboard::Numpad1)
        .value("Numpad2", sf::Keyboard::Numpad2)
        .value("Numpad3", sf::Keyboard::Numpad3)
        .value("Numpad4", sf::Keyboard::Numpad4)
        .value("Numpad5", sf::Keyboard::Numpad5)
        .value("Numpad6", sf::Keyboard::Numpad6)
        .value("Numpad7", sf::Keyboard::Numpad7)
        .value("Numpad8", sf::Keyboard::Numpad8)
        .value("Numpad9", sf::Keyboard::Numpad9)
        .value("F1", sf::Keyboard::F1)
        .value("F2", sf::Keyboard::F2)
        .value("F3", sf::Keyboard::F3)
        .value("F4", sf::Keyboard::F4)
        .value("F5", sf::Keyboard::F5)
        .value("F6", sf::Keyboard::F6)
        .value("F7", sf::Keyboard::F7)
        .value("F8", sf::Keyboard::F8)
        .value("F9", sf::Keyboard::F9)
        .value("F10", sf::Keyboard::F10)
        .value("F11", sf::Keyboard::F11)
        .value("F12", sf::Keyboard::F12)
        .value("F13", sf::Keyboard::F13)
        .value("F14", sf::Keyboard::F14)
        .value("F15", sf::Keyboard::F15)
        .value("Pause", sf::Keyboard::Pause)
        .value("KeyCount", sf::Keyboard::KeyCount)
        .export_values(); // end of sf::Keyboard::Key enum
        def("key_as_int", &key_as_int)
    ; } // end of sf::Keyboard scope
    { scope nested = class_<sf::Joystick>("Joystick",
        "Give access to the real-time state of the joysticks")
        .def("isConnected", &sf::Joystick::isConnected)
        .def("getButtonCount", &sf::Joystick::getButtonCount)
        .def("hasAxis", &sf::Joystick::hasAxis)
        .def("isButtonPressed", &sf::Joystick::isButtonPressed)
        .def("getAxisPosition", &sf::Joystick::getAxisPosition)
        .def("update", &sf::Joystick::update)
        .staticmethod("isConnected")
        .staticmethod("getButtonCount")
        .staticmethod("hasAxis")
        .staticmethod("isButtonPressed")
        .staticmethod("getAxisPosition")
        .staticmethod("update")
    ; enum_<JoystickConstants>("Constants",
        "Constants related to joysticks capabilities")
        .value("Count", Count)
        .value("ButtonCount", ButtonCount)
        .value("AxisCount", AxisCount)
        .export_values()
    ; enum_<sf::Joystick::Axis>("Axis", "Axes supported by SFML joysticks")
        .value("X", sf::Joystick::X)
        .value("Y", sf::Joystick::Y)
        .value("Z", sf::Joystick::Z)
        .value("R", sf::Joystick::R)
        .value("U", sf::Joystick::U)
        .value("V", sf::Joystick::V)
        .value("PovX", sf::Joystick::PovX)
        .value("PovY", sf::Joystick::PovY)
        .export_values()
    ; } // end of sf::Joystick scope
    { scope nested = class_<sf::Event>("Event")
        .def_readwrite("type", &sf::Event::type)
        .def_readwrite("size", &sf::Event::size)
        .def_readwrite("key", &sf::Event::key)
        .def_readwrite("text", &sf::Event::text)
        .def_readwrite("mouseMove", &sf::Event::mouseMove)
        .def_readwrite("mouseButton", &sf::Event::mouseButton)
        .def_readwrite("mouseWheel", &sf::Event::mouseWheel)
        .def_readwrite("joystickMove", &sf::Event::joystickMove)
        .def_readwrite("joystickButton", &sf::Event::joystickButton)
        .def_readwrite("joystickConnect", &sf::Event::joystickConnect)
    ; enum_<sf::Event::EventType>("EventType")
        .value("Closed", sf::Event::Closed)
        .value("Resized", sf::Event::Resized)
        .value("LostFocus", sf::Event::LostFocus)
        .value("GainedFocus", sf::Event::GainedFocus)
        .value("TextEntered", sf::Event::TextEntered)
        .value("KeyPressed", sf::Event::KeyPressed)
        .value("KeyReleased", sf::Event::KeyReleased)
        .value("MouseWheelMoved", sf::Event::MouseWheelMoved)
        .value("MouseButtonPressed", sf::Event::MouseButtonPressed)
        .value("MouseButtonReleased", sf::Event::MouseButtonReleased)
        .value("MouseMoved", sf::Event::MouseMoved)
        .value("MouseEntered", sf::Event::MouseEntered)
        .value("MouseLeft", sf::Event::MouseLeft)
        .value("JoystickButtonPressed", sf::Event::JoystickButtonPressed)
        .value("JoystickButtonReleased", sf::Event::JoystickButtonReleased)
        .value("JoystickMoved", sf::Event::JoystickMoved)
        .value("JoystickConnected", sf::Event::JoystickConnected)
        .value("JoystickDisconnected", sf::Event::JoystickDisconnected)
        .value("Count", sf::Event::Count)
        .export_values()
    ; class_<sf::Event::SizeEvent>("SizeEvent")
        .def_readwrite("width", &sf::Event::SizeEvent::width)
        .def_readwrite("height", &sf::Event::SizeEvent::height)
    ; class_<sf::Event::KeyEvent>("KeyEvent")
        .def_readwrite("code", &sf::Event::KeyEvent::code)
        .def_readwrite("alt", &sf::Event::KeyEvent::alt)
        .def_readwrite("control", &sf::Event::KeyEvent::control)
        .def_readwrite("shift", &sf::Event::KeyEvent::shift)
        .def_readwrite("system", &sf::Event::KeyEvent::system)
    ; class_<sf::Event::TextEvent>("TextEvent")
        .def_readwrite("unicode", &sf::Event::TextEvent::unicode)
    ; class_<sf::Event::MouseMoveEvent>("MouseMoveEvent")
        .def_readwrite("x", &sf::Event::MouseMoveEvent::x)
        .def_readwrite("y", &sf::Event::MouseMoveEvent::y)
    ; class_<sf::Event::MouseButtonEvent>("MouseButtonEvent")
        .def_readwrite("button", &sf::Event::MouseButtonEvent::button)
        .def_readwrite("x", &sf::Event::MouseButtonEvent::x)
        .def_readwrite("y", &sf::Event::MouseButtonEvent::y)
    ; class_<sf::Event::MouseWheelEvent>("MouseWheelEvent")
        .def_readwrite("delta", &sf::Event::MouseWheelEvent::delta)
        .def_readwrite("x", &sf::Event::MouseWheelEvent::x)
        .def_readwrite("y", &sf::Event::MouseWheelEvent::y)
    ; class_<sf::Event::JoystickMoveEvent>("JoystickMoveEvent")
        .def_readwrite("joystickId", &sf::Event::JoystickMoveEvent::joystickId)
        .def_readwrite("axis", &sf::Event::JoystickMoveEvent::axis)
        .def_readwrite("position", &sf::Event::JoystickMoveEvent::position)
    ; class_<sf::Event::JoystickButtonEvent>("JoystickButtonEvent")
        .def_readwrite("joystickId", &sf::Event::JoystickButtonEvent::joystickId)
        .def_readwrite("button", &sf::Event::JoystickButtonEvent::button)
    ; class_<sf::Event::JoystickConnectEvent>("JoystickConnectEvent")
        .def_readwrite("joystickId", &sf::Event::JoystickConnectEvent::joystickId)
    ; } // end of sf::Event scope
}
